{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"8LAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCkB3B,EArBA,WACb,IAAMI,EAAUC,IAAMC,IANR,cAORC,EAAc,CAClBC,GAAI,IACJN,QAAS,mCACTO,KAAM,2BACNR,WAAW,GAEb,OAAOG,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAaxC,EAVA,SAAAO,GAEb,OADgBT,IAAMU,KAjBR,aAiBsBD,GACrBJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACJ,EAAIM,GAElB,OADgBT,IAAMW,IAAN,UAtBF,aAsBE,YAAwBR,GAAMM,GAC/BJ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCmE5BK,EAtFH,SAAEC,GAAY,IAAD,EACGC,mBAAS,IADZ,mBAChBC,EADgB,KACTC,EADS,OAEOF,mBAAS,IAFhB,mBAEhBG,EAFgB,KAEPC,EAFO,OAGOJ,oBAAS,GAHhB,mBAGhBK,EAHgB,KAGPC,EAHO,KAKvBC,qBAAU,WACRC,QAAQC,IAAI,UACdC,IAEGnB,MAAK,SAAAoB,GACJT,EAASS,QAEV,IACHH,QAAQC,IAAI,SAAUR,EAAMW,OAAQ,SAEtC,IAyBUC,EAAcR,EAClBJ,EACAA,EAAMa,QAAO,SAAAnC,GAAI,OAAuB,IAAnBA,EAAKG,aAmB9B,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMsB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGQ,EAAYE,KAAI,SAACpC,EAAMqC,GAAP,OACf,kBAAC,EAAD,CACEC,IAAKD,EACLrC,KAAMA,EACNC,iBAAkB,kBA9BH,SAAAS,GAChB,sCAAkCA,GAA3C,IACMV,EAAOsB,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChC+B,EAAW,eAAQzC,EAAR,CAAcG,WAAYH,EAAKG,YAE9C4B,EACUrB,EAAI+B,GACT7B,MAAK,SAAA8B,GACNnB,EAASD,EAAMc,KAAI,SAAApC,GAAI,OAAIA,EAAKU,KAAOA,EAAKV,EAAO0C,SAEpDC,OAAM,SAAAC,GACLC,MAAM,aAAD,OACU7C,EAAKI,QADf,sCAGLmB,EAASD,EAAMa,QAAO,SAAAK,GAAC,OAAIA,EAAE9B,KAAOA,SAiBhCoC,CAAmB9C,EAAKU,WAG9B,0BAAMqC,SA/DI,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB9C,QAASoB,EACTb,MAAM,IAAIwC,MAAOC,cACjBjD,UAAWkD,KAAKC,SAAW,GAC3B5C,GAAIY,EAAMW,OAAS,GAGnBF,EACUmB,GACPtC,MAAK,SAAA8B,GACJnB,EAASD,EAAMP,OAAO2B,IACtBjB,EAAW,SAmDX,2BAAO8B,MAAO/B,EAASgC,SA5CN,SAACR,GACtBnB,QAAQC,IAAIkB,EAAMS,OAAOF,OACzB9B,EAAWuB,EAAMS,OAAOF,UA2CpB,4BAAQG,KAAK,UAAb,WC9ERC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ba9009de.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li>\n      {note.content} \n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\n\n\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport axios from 'axios'\nimport noteService from './services/notes'\n\nconst App = ( props ) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    console.log('effect')\n  noteService\n    .getAll()\n    .then(initialNotes => {\n      setNotes(initialNotes)\n    })\n  }, [])\n  console.log('render', notes.length, 'notes') \n\nconst addNote = (event) => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() > 0.5,\n    id: notes.length + 1,\n  }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n\n  //setNotes(notes.concat(noteObject))\n  //setNewNote('')\n}\n\nconst handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n    const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n  \nconst toggleImportanceOf = id => {\n  const url = `http://localhost:3001/notes/${id}`\n  const note = notes.find(n => n.id === id)\n  const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n        .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        alert(\n          `the note '${note.content}' was already deleted from server`\n        )\n        setNotes(notes.filter(n => n.id !== id))\n      })\n}\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div> \n      <ul>\n        {notesToShow.map((note, i) =>\n          <Note \n            key={i} \n            note={note} \n            toggleImportance={() => \n            toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>   \n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}